import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import NodeID3 from "node-id3";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
const musicDir = path.join(__dirname, "public", "music");
const postersDir = path.join(__dirname, "public", "posters");
const outputFile = path.join(__dirname, "tracks.json");

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ—Å—Ç–µ—Ä–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(postersDir)) {
  fs.mkdirSync(postersDir, { recursive: true });
}

async function extractMetadataFromFile(filePath, filename) {
  try {
    // –ß–∏—Ç–∞–µ–º ID3 —Ç–µ–≥–∏ –∏–∑ MP3 —Ñ–∞–π–ª–∞
    const tags = NodeID3.read(filePath);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–æ–∂–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    let posterPath = "/posters/default.jpg";
    if (tags.image && tags.image.imageBuffer) {
      const posterFilename = `poster_${Date.now()}_${Math.random().toString(36).substring(7)}.jpg`;
      const posterFullPath = path.join(postersDir, posterFilename);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–æ–∂–∫—É –≤ –ø–∞–ø–∫—É posters
      fs.writeFileSync(posterFullPath, tags.image.imageBuffer);
      posterPath = `/posters/${posterFilename}`;

      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞: ${posterFilename}`);
    }

    return {
      artist: tags.artist || "Unknown Artist",
      title: tags.title || filename.replace(/\.mp3$/i, ""),
      album: tags.album || "",
      year: tags.year || "",
      genre: tags.genre || "",
      posterPath: posterPath,
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ${filename}:`, error.message);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–≥–∏
    return {
      artist: "Unknown Artist",
      title: filename.replace(/\.mp3$/i, ""),
      album: "",
      year: "",
      genre: "",
      posterPath: "/posters/default.jpg",
    };
  }
}

async function generateMusicLibrary() {
  console.log("üîç –°–∫–∞–Ω–∏—Ä—É—é –ø–∞–ø–∫—É —Å –º—É–∑—ã–∫–æ–π...");
  console.log("–ü–∞–ø–∫–∞:", musicDir);

  if (!fs.existsSync(musicDir)) {
    console.error("‚ùå –ü–∞–ø–∫–∞ music –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
    console.log("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É: client/public/music/");
    process.exit(1);
  }

  try {
    const files = fs.readdirSync(musicDir);
    const mp3Files = files.filter(
      (file) => file.toLowerCase().endsWith(".mp3") && !file.startsWith("."),
    );

    console.log(`üéµ –ù–∞–π–¥–µ–Ω–æ MP3 —Ñ–∞–π–ª–æ–≤: ${mp3Files.length}`);

    if (mp3Files.length === 0) {
      console.log("‚ÑπÔ∏è  –ü–æ–ª–æ–∂–∏—Ç–µ MP3 —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É client/public/music/");
      process.exit(0);
    }

    const tracks = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    for (const filename of mp3Files) {
      const filePath = path.join(musicDir, filename);
      console.log(`üìñ –ß–∏—Ç–∞—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${filename}`);

      const metadata = await extractMetadataFromFile(filePath, filename);

      tracks.push({
        artist: metadata.artist,
        name: metadata.title,
        album: metadata.album,
        year: metadata.year,
        genre: metadata.genre,
        src: `/music/${filename}`,
        posterImg: metadata.posterPath,
        filename: filename,
      });
    }

    const musicLibrary = {
      generated: new Date().toISOString(),
      totalTracks: tracks.length,
      tracks: tracks,
    };

    fs.writeFileSync(outputFile, JSON.stringify(musicLibrary, null, 2));

    console.log("‚úÖ –ì–æ—Ç–æ–≤–æ!");
    console.log(`üìÅ JSON —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: client/public/music-library.json`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const withPosters = tracks.filter(
      (track) => track.posterImg !== "/posters/default.jpg",
    ).length;
    console.log(`üé∂ –¢—Ä–µ–∫–æ–≤ —Å –æ–±–ª–æ–∂–∫–∞–º–∏: ${withPosters}/${tracks.length}`);

    console.log("\nüìã –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤:");
    tracks.forEach((track, index) => {
      const posterStatus =
        track.posterImg !== "/posters/default.jpg" ? "üé®" : "‚ö™";
      console.log(
        `${index + 1}. ${posterStatus} ${track.artist} - ${track.name}`,
      );
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateMusicLibrary();
